#!/usr/bin/env python
import logging
import optparse
import os
import signal
import sys
import tempfile

_logger = logging.getLogger(__name__)

optparser = optparse.OptionParser()
optparser.add_option("-p", "--port", dest="socket_port", default=8090, help="listening port", type="int", metavar="NUMBER")
optparser.add_option("-s", "--session-path", dest="session_storage", default=os.path.join(tempfile.gettempdir(), "nebula-sessions"), help="Directory used for session storage", metavar="DIR")
optparser.add_option('--multi-threaded', dest='threaded', default=False, action='store_true', help="Spawn one thread per HTTP request")
optparser.add_option('--proxy-mode', dest='proxy_mode', default=False, action='store_true', help="Enable correct behavior when behind a reverse proxy")
optparser.add_option("--log-level", dest="log_level", type="choice", default='debug', help="Global logging level", metavar="LOG_LEVEL", choices=['debug', 'info', 'warning', 'error', 'critical'])

def signal_handler(sig, frame):
    os._exit(0)

def setup_signal_handlers():
    """ Register the signal handler defined above. """
    SIGNALS = map(lambda x: getattr(signal, "SIG%s" % x), "INT TERM".split())
    if os.name == 'posix':
        map(lambda sig: signal.signal(sig, signal_handler), SIGNALS)
        signal.signal(signal.SIGQUIT, dumpstacks)
    elif os.name == 'nt':
        import win32api
        win32api.SetConsoleCtrlHandler(lambda sig: signal_handler(sig, None), 1)

def dumpstacks(sig, frame):
    """ Signal handler: dump a stack trace for each existing thread."""
    # code from http://stackoverflow.com/questions/132058/getting-stack-trace-from-a-running-python-application#answer-2569696
    # modified for python 2.5 compatibility
    threads_info = dict([(th.ident, {'name': th.name, 'uid': getattr(th,'uid','n/a')}) for th in threading.enumerate()])
    code = []
    for threadId, stack in sys._current_frames().items():
        thread_info = threads_info.get(threadId)
        code.append("\n# Thread: %s (id:%s) (uid:%s)" % (thread_info and thread_info['name'] or 'n/a', threadId, thread_info and thread_info['uid'] or 'n/a'))
        for filename, lineno, name, line in traceback.extract_stack(stack):
            code.append('File: "%s", line %d, in %s' % (filename, lineno, name))
            if line:
                code.append("  %s" % (line.strip()))
    _logger.info("\n".join(code))

def quit_on_signals():
    # Wait for a first signal to be handled. (time.sleep will be interrupted
    # by the signal handler.) The try/except is for the win32 case.
    try:
        while quit_signals_received == 0:
            time.sleep(60)
    except KeyboardInterrupt, e:
        pass
    sys.exit(0)

if __name__ == "__main__":
    (options, args) = optparser.parse_args(sys.argv[1:])

    options.addons_path = []
    path_root = os.path.dirname(os.path.abspath(__file__))
    options.addons_path.append(path_root)
    for path_addons in options.addons_path:
        if path_addons not in sys.path:
            sys.path.insert(0, path_addons)

    os.environ["TZ"] = "UTC"

    setup_signal_handlers()

    import nebula

    nebula.models.main()

    import werkzeug.serving
    import werkzeug.contrib.fixers

    app = nebula.http.Root(options)

    if options.proxy_mode:
        app = werkzeug.contrib.fixers.ProxyFix(app)

    werkzeug.serving.run_simple( '0.0.0.0', options.socket_port, app, threaded=options.threaded)

# vim:et:ts=4:sw=4:
